#include <iostream>
#include <cmath>

using namespace std;

void decimalToBinary(double num, char* binary) {
    int integerPart = (int)num;
    int index = 0;

    while (integerPart > 0) {
        binary[index++] = (integerPart % 2) + '0';
        integerPart /= 2;
    }
    
    for (int i = 0; i < index / 2; ++i) {
        char temp = binary[i];
        binary[i] = binary[index - i - 1];
        binary[index - i - 1] = temp;
    }

    if (index == 0) {
        binary[index++] = '0';
    }

    binary[index++] = '.';

    double fractionalPart = num - (int)num;
    for (int i = 0; i < 8; ++i) {
        fractionalPart *= 2;
        int digit = (int)fractionalPart;
        binary[index++] = digit + '0';
        fractionalPart -= digit;
    }
    binary[index] = '\0';
}

double binaryToDecimal(const char* binary) {
    double result = 0;
    int power = 0;

    // Convert the integer part
    int i = 0;
    while (binary[i] != '.' && binary[i] != '\0') {
        if (binary[i] == '1') {
            result += pow(2, power);
        }
        ++power;
        ++i;
    }

    power = -1;
    ++i; // Skip the dot
    while (binary[i] != '\0') {
        if (binary[i] == '1') {
            result += pow(2, power);
        }
        --power;
        ++i;
    }

    return result;
}

unsigned int hexToDecimal(const char* hex) {
    unsigned int decimal = 0;
    int i = 0;
    while (hex[i] != '\0') {
        decimal *= 16;
        char c = hex[i];
        if (c >= '0' && c <= '9') {
            decimal += c - '0';
        } else if (c >= 'A' && c <= 'F') {
            decimal += c - 'A' + 10;
        }
        ++i;
    }
    return decimal;
}

void decimalToHex(int decimal, char* hex) {
    int index = 0;
    if (decimal == 0) {
        hex[index++] = '0';
    }
    while (decimal > 0) {
        int rem = decimal % 16;
        if (rem < 10) {
            hex[index++] = rem + '0';
        } else {
            hex[index++] = rem - 10 + 'A';
        }
        decimal /= 16;
    }
    hex[index] = '\0';

    for (int i = 0; i < index / 2; ++i) {
        char temp = hex[i];
        hex[i] = hex[index - i - 1];
        hex[index - i - 1] = temp;
    }
}

int main() {
    double a = 12.75, b = 67.125, c = 6.1, d = 7.55, e = 9.125, f = 90.15, g = 10.25, h = 25;
    
    char binary[64];
    decimalToBinary(a, binary);
    cout << "12.75 in binary: " << binary << endl;

    decimalToBinary(b, binary);
    cout << "67.125 in binary: " << binary << endl;

    decimalToBinary(c, binary);
    cout << "6.1 in binary: " << binary << endl;

    decimalToBinary(d, binary);
    cout << "7.55 in binary: " << binary << endl;

    decimalToBinary(e, binary);
    cout << "9.125 in binary: " << binary << endl;

    double result1 = a + b;
    double result2 = c * d - e;
    double result3 = f - g + h;

    cout << "12.75 + 67.125 = " << result1 << endl;
    cout << "6.1 * 7.55 - 9.125 = " << result2 << endl;
    cout << "90.15 - 10.25 + 25 = " << result3 << endl;

    const char* hex1 = "EEFA7";
    const char* hex2 = "ASA"; 
    const char* hex3 = "55A";
    const char* hex4 = "DA13";
    const char* hex5 = "1F3";
    const char* hex6 = "20";
    const char* hex7 = "E2C";

    unsigned int dec1 = hexToDecimal(hex1);
    unsigned int dec2 = hexToDecimal(hex2);  
    unsigned int dec3 = hexToDecimal(hex3);
    unsigned int dec4 = hexToDecimal(hex4);
    unsigned int dec5 = hexToDecimal(hex5);
    unsigned int dec6 = hexToDecimal(hex6);
    unsigned int dec7 = hexToDecimal(hex7);

    cout << "EEFA7 (hex) = " << dec1 << " (decimal)" << endl;
    cout << "DA13 (hex) = " << dec4 << " (decimal)" << endl;
    cout << "1F3 (hex) = " << dec5 << " (decimal)" << endl;
    cout << "20 (hex) = " << dec6 << " (decimal)" << endl;

    double result4 = dec1 - dec2 * dec3; // Invalid hex2
    double result5 = dec4 + dec5 * dec6 - dec7;
    cout << "EEFA7 - ASA * 55.A = " << result4 << endl;
    cout << "DA13 + 1F3 * 20 - E2.C = " << result5 << endl;

    return 0;
}
